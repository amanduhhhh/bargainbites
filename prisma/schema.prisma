// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// NextAuth.js models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  
  // User preferences from setup
  householdSize     Int?
  cookingExperience String?
  pantryStaples     String[]
  weeklyBudget      Float?
  equipment         String[]
  dietaryRestrictions String[]
  lunchPreference   String?
  specialRequests   String?
  preferencesSet    Boolean   @default(false)

  // Grocery list items
  groceryListItems  GroceryListItem[]
  
  // Meal plans
  mealPlans         MealPlan[]

  @@map("users")
}

model GroceryListItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  quantity    String?
  notes       String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("grocerylistitems")
}

model MealPlan {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  weekStartDate    DateTime // Start of the week (Sunday)
  store            String
  totalWeeklyCost  Float
  savings          Float
  lunchPreference  String?
  
  // Daily meals as JSON objects
  monday           Json
  tuesday          Json
  wednesday        Json
  thursday         Json
  friday           Json
  saturday         Json
  sunday           Json
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekStartDate])
  @@map("mealplans")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
